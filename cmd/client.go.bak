package main

import (
	"time"

	"github.com/gorilla/websocket"
)

type Hub struct {
}

type Hub struct {
	broadcast  chan []byte
	register   chan *Client
	unregister chan *Client
}

type MyClient struct {
	hub          *Hub
	Conn         *websocket.Conn
	LastActivity time.Time
}

const CLICK_MESSAGE_LENGTH int32 = 10

// type Color = uint8

// const (
// 	BLUE Color = 0
// 	RED  Color = 1
// )

// type Prefix = uint8

// const (
// 	LONG  Prefix = 0
// 	SHORT Prefix = 1
// )

// type Click struct {
// 	x     float32
// 	y     float32
// 	color Color
// }

// type Message struct {
// 	linePosition int32
// 	totalHits    int32
// 	click        Click
// }

// func (m *Message) WithClick(click Click) {
// 	m.click = click
// }

// func makeLongMessage(click Click) []byte {
// 	msg := make([]byte, 18)
// 	msg[0] = LONG
// 	binary.LittleEndian.PutUint32(msg[1:5], uint32(LINE_POSITION))
// 	binary.LittleEndian.PutUint32(msg[5:9], uint32(TOTAL_HITS))
// 	binary.LittleEndian.PutUint32(msg[9:13], math.Float32bits(click.x))
// 	binary.LittleEndian.PutUint32(msg[13:17], math.Float32bits(click.y))
// 	msg[17] = click.color
// 	return msg
// }

// func makeShortMessage() []byte {
// 	msg := make([]byte, 9)
// 	msg[0] = SHORT
// 	binary.LittleEndian.PutUint32(msg[1:5], uint32(LINE_POSITION))
// 	binary.LittleEndian.PutUint32(msg[5:9], uint32(TOTAL_HITS))
// 	return msg
// }

// func (m *Message) LongMessage() []byte {
// 	msg := make([]byte, 18)
// 	msg[0] = LONG
// 	binary.LittleEndian.PutUint32(msg[1:5], uint32(m.linePosition))
// 	binary.LittleEndian.PutUint32(msg[5:9], uint32(m.totalHits))
// 	binary.LittleEndian.PutUint32(msg[9:13], math.Float32bits(m.click.x))
// 	binary.LittleEndian.PutUint32(msg[13:17], math.Float32bits(m.click.y))
// 	msg[17] = m.click.color
// 	return msg
// }

// func (m *Message) ShortMessage() []byte {
// 	msg := make([]byte, 9)
// 	msg[0] = SHORT
// 	binary.LittleEndian.PutUint32(msg[1:5], uint32(m.linePosition))
// 	binary.LittleEndian.PutUint32(msg[5:9], uint32(m.totalHits))
// 	return msg
// }
